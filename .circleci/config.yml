version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.3
  ansible-playbook: orbss/ansible-playbook@0.0.5

parameters:
  NameBase:
    type: string
    default: "lec13"

jobs:
  deploy:
    executor: aws-cli/default
    docker:
      - image: circleci/python:3.8
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: Deploy Network CloudFormation stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --stack-name << pipeline.parameters.NameBase >>-network \
              --parameter-overrides EnvironmentName=$ENVIRONMENT_NAME \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name << pipeline.parameters.NameBase >>-network
      - run:
          name: Deploy Application CloudFormation stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/application.yml \
              --stack-name << pipeline.parameters.NameBase >>-application \
              --parameter-overrides DBPassword=$DB_PASSWORD EnvironmentName=$ENVIRONMENT_NAME \
              --capabilities CAPABILITY_NAMED_IAM

      - run:
          name: Set Environment Variables for Ansible
          command: |
            echo "export AWS_EC2_PUBLIC=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`EC2publicIP`].OutputValue' --output text)" >> $BASH_ENV
            echo "export DB_USER=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`DBUser`].OutputValue' --output text)" >> $BASH_ENV
            echo "export DB_PASSWORD=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`DBPassword`].OutputValue' --output text)" >> $BASH_ENV
            echo "export DB_HOST=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`DBhost`].OutputValue' --output text)" >> $BASH_ENV
            echo "export S3_BUCKET=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`S3bucketName`].OutputValue' --output text)" >> $BASH_ENV
            echo "export ALB_HOST=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`ALBendpoint`].OutputValue' --output text)" >> $BASH_ENV
            source "$BASH_ENV"
            echo "AWS_EC2_PUBLIC: $AWS_EC2_PUBLIC"
            echo "DB_USER: $DB_USER"
            echo "DB_PASSWORD: $DB_PASSWORD"
            echo "DB_HOST: $DB_HOST"
            echo "ALB_HOST: $ALB_HOST"
      
      - run:
          name: Install boto3 and botocore
          command: |
            pip install boto3 botocore
      - run:
          name: Verify boto3 installation
          command: python -m pip show boto3
      - run:
          name: Verify botocore installation
          command: python -m pip show botocore

      - run:
          name: Install Ansible
          command: |
            python -m pip install ansible

      - run:
          name: Check and Install Specific Version of amazon.aws Collection
          command: |
            if ! ansible-galaxy collection list | grep -q 'amazon.aws'; then
              echo "amazon.aws collection is not installed. Installing version 5.5.0..."
              ansible-galaxy collection install amazon.aws:3.5.0
            else
              echo "amazon.aws collection is already installed."
            fi

      - run:
          name: Set up SSH Key
          command: |
            mkdir -p ~/.ssh
            echo "$PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa

      - run:
          name: Test SSH Connection
          command: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$AWS_EC2_PUBLIC echo "SSH connection successful"

      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION

      - run:
          name: Set Environment Variables for Ansible
          command: |
            source "$BASH_ENV"
            echo "AWS_EC2_PUBLIC: $AWS_EC2_PUBLIC"
            echo "DB_USER: $DB_USER"
            echo "DB_PASSWORD: $DB_PASSWORD"
            echo "DB_HOST: $DB_HOST"

      - run:
          name: Run Ansible Playbook
          command: ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/aws_ec2.yml ansible/playbook.yml --private-key ~/.ssh/id_rsa -vvvv


workflows:
  lecture13:
    jobs:
      - deploy
