version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.3
  ansible-playbook: orbss/ansible-playbook@0.0.5

parameters:
  NameBase:
    type: string
    default: "lec13"

jobs:
  deploy:
    docker:
      - image: circleci/python:3.8
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: Deploy Network CloudFormation stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --stack-name << pipeline.parameters.NameBase >>-network \
              --parameter-overrides EnvironmentName=$ENVIRONMENT_NAME \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name << pipeline.parameters.NameBase >>-network
      - run:
          name: Deploy Application CloudFormation stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/application.yml \
              --stack-name << pipeline.parameters.NameBase >>-application \
              --parameter-overrides DBPassword=$DB_PASSWORD EnvironmentName=$ENVIRONMENT_NAME \
              --capabilities CAPABILITY_NAMED_IAM

      - run:
          name: Set Environment Variables for Ansible
          command: |
            echo "export AWS_EC2_PUBLIC=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`EC2publicIP`].OutputValue' --output text)" >> bash.env
            echo "export DB_USER=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`DBUser`].OutputValue' --output text)" >> bash.env
            echo "export DB_PASSWORD=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`DBPassword`].OutputValue' --output text)" >> bash.env
            echo "export DB_HOST=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`DBhost`].OutputValue' --output text)" >> bash.env
            echo "export S3_BUCKET=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`S3bucketName`].OutputValue' --output text)" >> bash.env
            echo "export ALB_HOST=$(aws cloudformation describe-stacks --stack-name << pipeline.parameters.NameBase >>-application --query 'Stacks[].Outputs[?OutputKey==`ALBendpoint`].OutputValue' --output text)" >> bash.env
            cat bash.env
            
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

      - run:
          name: Run Ansible Playbook
          command: ansible-playbook -i "$AWS_EC2_PUBLIC", -u ec2-user ansible/playbook.yml

  execute_serverspec:
    docker:
      - image: cimg/ruby:3.2.3
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load environment variables
          command: |
            if [ -f bash.env ]; then
              set -o allexport
              source bash.env
              set +o allexport
            else
              echo "bash.env not found!"
              exit 1
            fi
      - run: ruby --version
      - run:
          name: bundle install
          command: |
            cd serverspec
            bundle install
      - run:
          name: execute serverspec
          command: |
            cd serverspec
            bundle exec rake spec

workflows:
  lecture13:
    jobs:
      - deploy
      - execute_serverspec:
          requires:
            - deploy
